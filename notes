
db record format:
. md5sum -- for both:
.. filename
.. uniqueness
. label name 
. coordinates
. altitude
. date/time
. width/height

import steps:
1) prompt for label name for
imported files (ie, '2015 vacation')

2) read files
. md5sum compare against DB entries
 ( and file system ?? ) 
. if unique:
.. copy file with md5sum name
into directory... 
.... if copy successful:

3) put as much of above info as possible
into db
... if you can't read any of it, store only
	the file name (md5sum)
... if db entry NOT successful:
..... delete file


--------------
keeping map and list in sync:
. not ever item in list has pin
. every pin has an item in list

when list item clicked:
. set pin center of map
.. animate?
. change zoom level ?
.. animate?
. change pin color
. set active color on list item
. set previously selected item to gray

when pin clicked
. change pin color
. set active color on list item
. set previously selected item to gray

-----------------
import country geojson
### first have to strip off "featureCollection" tag, then wrap entire file in array brackets:
mongoimport --drop --db photo_mapper --collection countries --type json --file countries.geojson --jsonArray
# find in Mongo client:
var italy = db.countries.findOne({'properties.admin': 'Italy'})


# scratch:
var monk = require('monk');

var db = monk('localhost:27017/photo_mapper');
var photoCol = db.get('photo_mapper');
var countryCol = db.get('countries');
var photos = [];
var countries = [];

// temporary var to hold photo data converted
// to geojson, ultimately I need to make the photo 
// records themselves hold this data:
photoCol.find({}, function(e,docs){
	docs.forEach(function(i) { 
		console.log(i);
		if (i.longitude && i.latitude) {
			photos.push(
				geometry: {
					"type": "Point",
					"coordinates": [
						i.longitude,  
						i.latitude 
					]}
			); 
		}
	});
});

// same as above but put it into separate
// collection instead of variable:
var pointCol = db.get('points')
var photos = [];
photoCol.find({}, function(e,docs){
	photos = docs;
});
photos.forEach(function(i) {
	if (i.longitude && i.latitude) {
		pointCol.insert(
		{
			geometry: { 
				"type": "Point",
				"coordinates": [
					i.longitude,
					i.latitude
				]
			}
		},
		function(err, docs) {
			if (err) throw err;
		});
	}
});


// find italy and assign to var:
var italy; 
countryCol.findOne({'properties.admin': 'Italy'}).on('success', function(doc) { italy = doc; });


// now see if it can find photos within Italy:
pointCol.find(
	{
		geometry: { 
			$geoWithin: { 
				$geometry: italy.geometry
			}
		}
	},
	function(err, docs) {
		docs.forEach(function(curr) {
			console.log(curr);
		});
	}
);

var point = {
  "type": "Point",
  "coordinates": [
    longitude,  
    latitude 
  ]
};

// iterate through countries, find photos that fall within
// them:
// Antarctica, Russia, and Fiji throw errors:
var countries;
countryCol.find({}).on('success', function(doc) { countries = doc; });
countries.forEach(function(country) {
	photoCol.find(
		{
			geojson: {
				$geoWithin: {
					$geometry: country.geometry
				}
			}
		},
		function(err, docs) {
			if (err) console.log(country.properties.admin,' error: ',err);
			if (docs) {
				docs.forEach(function(curr) {
					console.log(curr);
				});
			}
		}
	);
});
------------------------
steps for adding country data:
. 
